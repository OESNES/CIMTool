<?xml version="1.0" encoding="UTF-8"?>
<xsl:stylesheet 
    version="1.0"
    xmlns:xsl="http://www.w3.org/1999/XSL/Transform"
    xmlns:xs="http://www.w3.org/2001/XMLSchema" 
    xmlns:mdimsg="mdimsg"
    xmlns:a="http://langdale.com.au/2005/Message#"
>
           
    <xsl:output indent="yes"/>
    <xsl:param name="version"></xsl:param>
    
    <xsl:template match="a:Message">
        <!--  the top level template generates the xml schema element for the message -->
        <xs:schema
            targetNamespace="{@name}" 
            elementFormDefault="qualified" 
            attributeFormDefault="unqualified">
        
            <xs:annotation>
        	<xs:documentation>Generated by CIMTool <xsl:value-of select="$version"/>, see https://cimtool.ucaiug.io</xs:documentation>
            </xs:annotation>
 
            <xs:import namespace="mdimsg" schemaLocation="mdiMessage.xsd"/>
            
            <xs:element name="{@name}">
 		<xs:complexType>
                    <xsl:apply-templates mode="annotate"/>
			<xs:sequence>
				<xs:element name="MessageHeader" type="mdimsg:MessageHeader" minOccurs="0"/>
				<xs:element name="MessagePayload">
					<xs:complexType>
						<xs:sequence>                 
                                                    <xsl:apply-templates/>
                                                </xs:sequence>
                                        </xs:complexType>
                                 </xs:element>
                        </xs:sequence>
                </xs:complexType>
            </xs:element>
	
        </xs:schema>
    </xsl:template>

    <xsl:template match="a:Root">
        <!--  generates the root payload element definitions -->
        <xs:element name="{@name}" minOccurs="0" maxOccurs="unbounded">
          <xs:complexType>
              <xsl:apply-templates mode="annotate"/>
              <xs:sequence>
                <xsl:apply-templates mode="ref"/>
              </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xsl:apply-templates/>
        
    </xsl:template>

    <xsl:template match="a:Complex">
        <!--  generates the nested element definitions -->
        <xs:element name="{@name}"  minOccurs="0" maxOccurs="unbounded">
          <xs:complexType>
              <xsl:apply-templates mode="annotate"/>
              <xs:sequence>
                <xsl:apply-templates mode="ref"/>
              </xs:sequence>
          </xs:complexType>
        </xs:element>
        <xsl:apply-templates/>
        
    </xsl:template>

    <xsl:template match="a:Simple" mode="ref">
        <!--  generates a simple element -->
        <xs:element name="{@name}" minOccurs="{@minOccurs}" maxOccurs="{@maxOccurs}" type="xs:{@xstype}" >
              <xsl:apply-templates mode="annotate"/>
        </xs:element>
        
    </xsl:template>
    
    <xsl:template match="a:Reference|a:Complex" mode="ref">
        <!-- generates a reference to an object in the model -->
        <xs:element name="{@name}" minOccurs="{@minOccurs}" maxOccurs="{@maxOccurs}" type="mdimsg:SimpleAssociation">
              <xsl:apply-templates mode="annotate"/>
        </xs:element>
    </xsl:template>
    
    <xsl:template match="a:Comment" mode="annotate">
        <!--  generate and annotation -->
        <xs:annotation>
	   <xs:documentation>
	       <xsl:value-of select="."/>
            </xs:documentation>
	</xs:annotation>
    </xsl:template>
    
    <xsl:template match="text()">
      <!--  dont pass text through  -->
    </xsl:template>
    
    <xsl:template match="text()" mode="ref">
      <!--  dont pass text through  -->
    </xsl:template>
    
    <xsl:template match="node()" mode="annotate">
      <!-- dont pass any defaults in annotate mode -->
    </xsl:template>

</xsl:stylesheet>